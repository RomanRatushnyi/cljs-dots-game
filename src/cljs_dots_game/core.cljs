(ns cljs-dots-game.core
  (:require [reagent.core :as r]
            [reagent.dom.client :as rdom]
            [cljs-dots-game.game :as game]
            [cljs-dots-game.types :as types]
            ["socket.io-client" :as io]))

;; –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(defonce app-state (r/atom {:game-state nil
                            :socket nil
                            :room-id nil
                            :player-id nil
                            :connected false
                            :waiting-for-player false
                            :players-count 0}))

;; WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
(defonce socket (atom nil))

;; –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–∫–µ—Ç–æ–º
(defn connect-socket! []
  (let [new-socket (io "http://localhost:3000")]
    (reset! socket new-socket)
    (swap! app-state assoc :socket new-socket)

    ;; –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    (.on new-socket "connect"
         (fn []
           (js/console.log "–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")
           (swap! app-state assoc :connected true)
           ;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
           (.emit new-socket "createRoom")))

    (.on new-socket "roomCreated"
         (fn [^js data]
           (let [room-id (.-roomId data)
                 player-id (.-playerId data)]
             (js/console.log (str "–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: " room-id))
             (swap! app-state assoc
                    :room-id room-id
                    :player-id player-id
                    :waiting-for-player true
                    :players-count 1))))

    (.on new-socket "roomJoined"
         (fn [^js data]
           (let [room-id (.-roomId data)
                 player-id (.-playerId data)]
             (js/console.log (str "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: " room-id))
             (swap! app-state assoc
                    :room-id room-id
                    :player-id player-id
                    :waiting-for-player false
                    :players-count 2))))

    (.on new-socket "gameState"
         (fn [^js data]
           (let [game-state (js->clj data :keywordize-keys true)]
             (js/console.log "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:" game-state)
             (js/console.log "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ app-state:" (clj->js @app-state))
             (swap! app-state assoc :game-state game-state)
             (js/console.log "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ app-state:" (clj->js @app-state)))))

    (.on new-socket "playerJoined"
         (fn [^js data]
           (js/console.log "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")
           (swap! app-state assoc
                  :waiting-for-player false
                  :players-count 2)))

    (.on new-socket "playerLeft"
         (fn []
           (js/console.log "–ò–≥—Ä–æ–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É")
           (swap! app-state assoc
                  :waiting-for-player true
                  :players-count 1)))

    (.on new-socket "error"
         (fn [^js data]
           (js/console.error "–û—à–∏–±–∫–∞:" (.-message data))))

    (.on new-socket "disconnect"
         (fn []
           (js/console.log "–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
           (swap! app-state assoc :connected false)))))

;; –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ
(defn join-room! [room-id]
  (when-let [socket-conn @socket]
    (.emit socket-conn "joinRoom" #js {:roomId room-id})))

;; –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
(defn handle-cell-click [x y]
  (when-let [socket-conn @socket]
    (.emit socket-conn "makeMove" #js {:x x :y y})))

;; –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª–µ—Ç–∫–∏
(defn cell-component [x y cell-value]
  (let [{:keys [waiting-for-player]} @app-state
        class-name (cond
                    (= cell-value (:player1 types/player)) "cell player1"
                    (= cell-value (:player2 types/player)) "cell player2"
                    (= cell-value (:captured types/cell-state)) "cell captured"
                    :else "cell empty")]
    [:div {:class class-name
           :on-click (when-not waiting-for-player #(handle-cell-click x y))}
     (cond
       (= cell-value (:player1 types/player)) "‚óè"
       (= cell-value (:player2 types/player)) "‚óè"
       (= cell-value (:captured types/cell-state)) "‚úï"
       :else "")]))

;; –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
(defn board-component []
  (let [{:keys [game-state waiting-for-player]} @app-state]
    (if game-state
      (let [{:keys [board width height]} game-state]
        [:div.board
         (for [y (range height)]
           ^{:key y}
           [:div.row
            (for [x (range width)]
              ^{:key (str x "-" y)}
              [cell-component x y (get-in board [y x])])])])
      [:div.board-placeholder
       (if waiting-for-player
         "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä—ã..."
         "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")])))

;; –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
(defn connection-status-component []
  (let [{:keys [connected waiting-for-player room-id players-count]} @app-state]
    [:div.connection-status
     (cond
       (not connected)
       [:div
        [:p "üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."]
        [:button {:on-click connect-socket!} "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"]]

       waiting-for-player
       [:div
        [:p "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞"]
        [:p (str "–ö–æ–º–Ω–∞—Ç–∞: " room-id)]
        [:p "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º:"]
        [:div.room-code room-id]
        [:div.join-section
         [:p "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"]
         [:input {:id "room-input" :placeholder "–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"}]
         [:button {:on-click #(let [input-room-id (.-value (.getElementById js/document "room-input"))]
                                (when (not-empty input-room-id)
                                  (join-room! input-room-id)))}
          "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"]]]

       :else
       [:div
        [:p "‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!"]
        [:p (str "–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: " players-count)]])]))

;; –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
(defn game-info-component []
  (let [{:keys [game-state waiting-for-player]} @app-state]
    (if (and game-state (not waiting-for-player))
      (let [{:keys [current-player scores game-over winner]} game-state
            score1 (get scores (:player1 types/player))
            score2 (get scores (:player2 types/player))]
        [:div.game-info
         [:h2 "–ò–≥—Ä–∞ \"–¢–æ—á–∫–∏\""]
         [:div.scores
          [:div (str "–ò–≥—Ä–æ–∫ 1: " score1)]
          [:div (str "–ò–≥—Ä–æ–∫ 2: " score2)]]
         (if game-over
           [:div.game-status
            (if winner
              (str "üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –ò–≥—Ä–æ–∫ " winner)
              "ü§ù –ù–∏—á—å—è!")]
           [:div.game-status (str "–•–æ–¥ –∏–≥—Ä–æ–∫–∞: " current-player)])])
      [:div.game-info
       [:h2 "–ò–≥—Ä–∞ \"–¢–æ—á–∫–∏\""]
       [:p "–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–≥—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"]])))

;; –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
(defn app-component []
  [:div.app
   [game-info-component]
   [connection-status-component]
   [board-component]])

;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(defn auto-connect! []
  (js/setTimeout connect-socket! 100))

;; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(defn ^:export init! []
  (let [container (.getElementById js/document "app")
        root (rdom/create-root container)]
    (rdom/render root [app-component])
    ;; –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    (auto-connect!)))
